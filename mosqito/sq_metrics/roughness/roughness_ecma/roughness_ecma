from numpy import(
    abs,
    power,
    zeros,
    empty,
    sum,
    array,
    clip,
    exp,
    mean,
    median,
    where,
    diff,
    sign
)
from numpy.fft import fft
from scipy.signal import (hilbert, resample)
from scipy.signal.windows import hann

# Project Imports
from mosqito.sq_metrics.loudness.loudness_ecma._rectified_band_pass_signals import _rectified_band_pass_signals
from mosqito.sq_metrics.loudness.loudness_ecma._nonlinearity import _nonlinearity

# Data import
# Threshold in quiet
from mosqito.sq_metrics import loudness_ecma
from mosqito.utils import load




def roughness_ecma(signal):
    """Calculation of the roughness according to ECMA-418-2 section 7

    Parameters
    ----------
    signal: numpy.array
        time signal values in 'Pa'. The sampling frequency of the signal must be 48000 Hz.

    Returns
    -------
    n_specific: list of numpy.array
        Specific Loudness [sone_HMS per Bark]. Each of the 53 element of the list corresponds to the time-dependant
        specific loudness for a given bark band. Can be a ragged array if a different sb/sh are used for each band.
    bark_axis: numpy.array
        Bark axis
    """
    # Sampling frequency
    fs = 48000
    N_samples = len(signal)
    CBF = 53

    # Hop size and block size for specific loudness calculation (7.1.1)
    sb=16384
    sh=4096
    N_specific, bark_axis = loudness_ecma(signal, sb, sh)
    N_specific = array(N_specific)
    # ! ces valeurs sont déjà calculées dans la loudness
    block_array_rect = array(_rectified_band_pass_signals(signal, sb, sh))
    # ENVELOPPE CALCULATION AND DOWNSAMPLING (7.1.2)
    envelopes = abs(block_array_rect + 1j * hilbert(block_array_rect))

    # Downsampling to 1500 Hz
    # New block and hop sizes
    sbb = 512
    shh = 128
    envelopes = resample(envelopes, sbb, axis=2)


    ########## BOUCLE SUR LES TIME BLOCKS l (voir nouveau fichier)


    # CALCULATION OF SCALED POWER SPECTRUM (7.1.3)
    spectrum = zeros((53,6,sbb//2))
    N_specific_max = array(N_specific).max(axis=0)
    phi_e = sum(power(envelopes * hann(sbb),2), axis=2)
    den = N_specific_max * phi_e

    # Hann window is precisely defined in the standard !!
    dft = power(abs(fft((envelopes * hann(sbb)),n=sbb//2, axis=2)),2)
    
    for z in range(envelopes.shape[0]): # for each CBF
        for l in range(envelopes.shape[1]): # for each time block
            if den[z,l]!=0:
                spectrum[z,l,:] = power(N_specific[z,l],2) / den[z,l] * dft[z,l,:]
    
    # NOISE REDUCTION OF THE ENVELOPES (7.1.4)

    # Averaging with neighbouring bands
    av_spectrum = empty((spectrum.shape))
    av_spectrum[0,:] = (spectrum[0,:]+spectrum[1,:])/2
    av_spectrum[-1,:] = (spectrum[-1,:]+spectrum[-2,:])/2
    av_spectrum[1:-1,:] = (spectrum[:-2,:]+spectrum[1:-1,:]+spectrum[2:,:])/3

    S = av_spectrum.sum(axis=0)
    SS = median(S, axis=1)

    # Weighting
    wfw = zeros(S.shape)
    wf = zeros(S.shape)
    for k in range(S.shape[1]): # for each time block
        wfw[:,k] = 0.0856 * S[:,k]/(SS+10e-10) * clip(0.1891*exp(0.0120*k),0,1)

    idt = 0.05 * wfw.max(axis=1)
    for l in range(S.shape[0]):

        idt = where(wfw[l,:]>0.05 * wfw[l,:].max())
        wf[l,idt] = clip(wfw[l,idt]-0.1407,0,1)

    Phi_E = zeros(av_spectrum.shape)
    for z in range(CBF):
        Phi_E[z,:,:] = av_spectrum[z,:,:] * wf

    maxima = (diff(sign(diff(Phi_E, axis=2)), axis=2) < 0).nonzero()[0] + 1

    import pdb; pdb.set_trace()
    

    # SPECTRAL WEIGHTING (7.1.5)

    # Peak picking

    max(axis=2)

    # Weighting of high modulation rates
    # Estimation of fundamental modulation rate
    # Weighting of low modulation rates

    # ENTROPY WEIGHTING (OPTIONAL) (7.1.6)

    # CALCULATION OF TIME DEPENDENT SPECIFIC ROUGHNESS (7.1.7)

    # CALCULATION OF REPRESENTATIVE VALUES (7.1.8)

    # CALCULATION OF ROUGHNESS FOR BINAURAL SIGNALS


    return envelopes


signal, fs = load(r"C:\Users\LAP16\Desktop\loudness scale\test.wav", wav_calib=2*2e-5)
import matplotlib.pyplot as plt

envelopes = roughness_ecma(signal[:int(len(signal)/2)])