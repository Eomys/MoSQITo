    """
    Summary.

    Detailed description of the function.

    Parameters
    ----------

    a : array_like
        Description, dim (nperseg x nseg)
    b : float
        Description. Default to None
    c : {'method 1', 'method 2'},  optional
        Description. Default to 'method 1'


    Returns
    -------
    M : float
        Global metric value in [unit]
    M_spec : numpy.ndarray
        Specific metric value over frequency axis
    freq_axis : numpy.ndarray
        Frequency axis in [unit]
    time_axis : numpy.ndarray
        Time axis in [s]

    See Also
    --------
    .metric_freq : metric computation from a sound spectrum

    Warning
    --------
    Spectrum should be provided in dB.

    Notes
    -----
    Bonus description or to go further or details about the different methods
    The model consists of a parallel processing structure that is made up
    of successive stages and calculates intermediate specific values,
    which are summed up to determine the global value.

    References
    ----------
    :cite:empty:'a-STANDARD'
    
    .. bibliography::
        :keyprefix: a-

    Examples
    --------
    .. plot::
       :include-source:

       >>> from mosqito.sq_metrics import roughness_dw 
       >>> import matplotlib.pyplot as plt
       >>> fc=1000
       >>> fmod=70
       >>> fs=44100
       >>> d=0.2
       >>> dB=60
       >>> time = np.arange(0, d, 1/fs)
       >>> stimulus = (
       >>> 0.5
       >>> * (1 + np.sin(2 * np.pi * fmod * time))
       >>> * np.sin(2 * np.pi * fc * time))   
       >>> rms = np.sqrt(np.mean(np.power(stimulus, 2)))
       >>> ampl = 0.00002 * np.power(10, dB / 20) / rms
       >>> stimulus = stimulus * ampl
       >>> R, R_specific, bark, time = roughness_dw(stimulus, fs=44100, overlap=0)
       >>> plt.plot(bark, R_specific)
       >>> plt.xlabel("Bark axis [Bark]")
       >>> plt.ylabel("Roughness, [Asper]")
       
    """